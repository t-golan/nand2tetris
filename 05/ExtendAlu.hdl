// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The output is defined as follows:
// If instruction[7..8] == 1, 1, the output is the same as the regular ALU,
// where instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no.
// If instruction[8] == 0, the output will be a shift of the input:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x", 
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     
	 
	 
	 ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3],
	 ny=instruction[2], f=instruction[1], no=instruction[0],
	 out=aluout);
	 
	 ShiftRight(in=y, out=yright);
	 ShiftRight(in=x, out=xright);
	 ShiftLeft(in=y, out=yleft);
	 ShiftLeft(in=x, out=xleft);

	 
	 Mux4Way16(a=yright, b=xright, c=yleft, d=xleft, sel=instruction[4..5], out=shiftout);
     Mux16(a=shiftout, b=aluout, sel=instruction[8], out[15]=ng, out[0..7]=ora,           	 out[8..15]=orb, out=out);
	 
	 // split into 2
     Or8Way(in=ora, out=orout1);
     Or8Way(in=orb, in[7]=false, out=orout2);
	 // check if there is any 1
     Or(a=orout1, b=orout2, out=notzr);
     Not(in=notzr, out=zr);
	 
}
